//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DDNHRIS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HRISDBEntities : DbContext
    {
        public HRISDBEntities()
            : base("name=HRISDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<aTemp> aTemps { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tApplicantComptAssmnt> tApplicantComptAssmnts { get; set; }
        public virtual DbSet<tApplicantComptAsst> tApplicantComptAssts { get; set; }
        public virtual DbSet<tApplicantEducation> tApplicantEducations { get; set; }
        public virtual DbSet<tApplicantEligibility> tApplicantEligibilities { get; set; }
        public virtual DbSet<tApplicantIPCR> tApplicantIPCRs { get; set; }
        public virtual DbSet<tApplicantProfile> tApplicantProfiles { get; set; }
        public virtual DbSet<tApplicantTraining> tApplicantTrainings { get; set; }
        public virtual DbSet<tApplicantWE> tApplicantWES { get; set; }
        public virtual DbSet<tApplicantWESAccomp> tApplicantWESAccomps { get; set; }
        public virtual DbSet<tAppointmentNPPosting> tAppointmentNPPostings { get; set; }
        public virtual DbSet<tAttEmpScheme> tAttEmpSchemes { get; set; }
        public virtual DbSet<tAttEmpSchemeDaily> tAttEmpSchemeDailies { get; set; }
        public virtual DbSet<tAttEmpSchemeSched> tAttEmpSchemeScheds { get; set; }
        public virtual DbSet<tAttEmpSchemeSchedDetail> tAttEmpSchemeSchedDetails { get; set; }
        public virtual DbSet<tAttHoliday> tAttHolidays { get; set; }
        public virtual DbSet<tAttLogDevice> tAttLogDevices { get; set; }
        public virtual DbSet<tAttLogScheme> tAttLogSchemes { get; set; }
        public virtual DbSet<tJustifyApp> tJustifyApps { get; set; }
        public virtual DbSet<tLNDCompetency> tLNDCompetencies { get; set; }
        public virtual DbSet<tLNDCompetencyGroup> tLNDCompetencyGroups { get; set; }
        public virtual DbSet<tLNDCompetencyPosition> tLNDCompetencyPositions { get; set; }
        public virtual DbSet<tLNDCompetencyPositionMap> tLNDCompetencyPositionMaps { get; set; }
        public virtual DbSet<tLNDCompetencyPositionTech> tLNDCompetencyPositionTeches { get; set; }
        public virtual DbSet<tLNDCompetencyStandard> tLNDCompetencyStandards { get; set; }
        public virtual DbSet<tLNDComptAssessmentGroup> tLNDComptAssessmentGroups { get; set; }
        public virtual DbSet<tLNDComptCriteria> tLNDComptCriterias { get; set; }
        public virtual DbSet<tLNDComptRespondent> tLNDComptRespondents { get; set; }
        public virtual DbSet<tLNDComptRespondentAn> tLNDComptRespondentAns { get; set; }
        public virtual DbSet<tLNDComptResult> tLNDComptResults { get; set; }
        public virtual DbSet<tLNDCoreTeamAccess> tLNDCoreTeamAccesses { get; set; }
        public virtual DbSet<tLNDHRDFocal> tLNDHRDFocals { get; set; }
        public virtual DbSet<tLNDPsychoSocial> tLNDPsychoSocials { get; set; }
        public virtual DbSet<tLNDPsychoSocialTest> tLNDPsychoSocialTests { get; set; }
        public virtual DbSet<tLNDToolListed> tLNDToolListeds { get; set; }
        public virtual DbSet<tLNDToolProgressive> tLNDToolProgressives { get; set; }
        public virtual DbSet<tLNDYear> tLNDYears { get; set; }
        public virtual DbSet<tOnlineRequest> tOnlineRequests { get; set; }
        public virtual DbSet<tOnlineRequestItem> tOnlineRequestItems { get; set; }
        public virtual DbSet<tOnlineRequestLog> tOnlineRequestLogs { get; set; }
        public virtual DbSet<tOnlineService> tOnlineServices { get; set; }
        public virtual DbSet<tOrgCluster> tOrgClusters { get; set; }
        public virtual DbSet<tOrgDepartment> tOrgDepartments { get; set; }
        public virtual DbSet<tOrgDepartmentHead> tOrgDepartmentHeads { get; set; }
        public virtual DbSet<tOrgDivision> tOrgDivisions { get; set; }
        public virtual DbSet<tOrgFunction> tOrgFunctions { get; set; }
        public virtual DbSet<tOrgSection> tOrgSections { get; set; }
        public virtual DbSet<tOrgStructure> tOrgStructures { get; set; }
        public virtual DbSet<tOrgStructurePlaceAssign> tOrgStructurePlaceAssigns { get; set; }
        public virtual DbSet<tOrgUnit> tOrgUnits { get; set; }
        public virtual DbSet<tPDSWE> tPDSWES { get; set; }
        public virtual DbSet<tPDSWESAccomplishment> tPDSWESAccomplishments { get; set; }
        public virtual DbSet<tReportBudgetarySaving> tReportBudgetarySavings { get; set; }
        public virtual DbSet<tReportPlantilla> tReportPlantillas { get; set; }
        public virtual DbSet<tRSP201File> tRSP201File { get; set; }
        public virtual DbSet<tRSPApplication> tRSPApplications { get; set; }
        public virtual DbSet<tRSPApplicationAssessment> tRSPApplicationAssessments { get; set; }
        public virtual DbSet<tRSPApplicationComptAssmnt> tRSPApplicationComptAssmnts { get; set; }
        public virtual DbSet<tRSPApplicationComptAssmntResult> tRSPApplicationComptAssmntResults { get; set; }
        public virtual DbSet<tRSPApplicationEducation> tRSPApplicationEducations { get; set; }
        public virtual DbSet<tRSPApplicationEligibility> tRSPApplicationEligibilities { get; set; }
        public virtual DbSet<tRSPApplicationLog> tRSPApplicationLogs { get; set; }
        public virtual DbSet<tRSPApplicationProfile> tRSPApplicationProfiles { get; set; }
        public virtual DbSet<tRSPApplicationTraining> tRSPApplicationTrainings { get; set; }
        public virtual DbSet<tRSPApplicationWE> tRSPApplicationWES { get; set; }
        public virtual DbSet<tRSPAppointment> tRSPAppointments { get; set; }
        public virtual DbSet<tRSPAppointmentNature> tRSPAppointmentNatures { get; set; }
        public virtual DbSet<tRSPAppointmentNotify> tRSPAppointmentNotifies { get; set; }
        public virtual DbSet<tRSPApptNONPlantillaPosted> tRSPApptNONPlantillaPosteds { get; set; }
        public virtual DbSet<tRSPEligibility> tRSPEligibilities { get; set; }
        public virtual DbSet<tRSPempInfo> tRSPempInfoes { get; set; }
        public virtual DbSet<tRSPEmployeePosition> tRSPEmployeePositions { get; set; }
        public virtual DbSet<tRSPEmploymentStatu> tRSPEmploymentStatus { get; set; }
        public virtual DbSet<tRSPlantillaMagnaCarta> tRSPlantillaMagnaCartas { get; set; }
        public virtual DbSet<tRSPMagnaCarta> tRSPMagnaCartas { get; set; }
        public virtual DbSet<tRSPNONPlantilla> tRSPNONPlantillas { get; set; }
        public virtual DbSet<tRSPNonPlantillaPersonnel> tRSPNonPlantillaPersonnels { get; set; }
        public virtual DbSet<tRSPNOSAMaster> tRSPNOSAMasters { get; set; }
        public virtual DbSet<tRSPNOSI> tRSPNOSIs { get; set; }
        public virtual DbSet<tRSPNOSIPropBudYear> tRSPNOSIPropBudYears { get; set; }
        public virtual DbSet<tRSPPlantillaHazard> tRSPPlantillaHazards { get; set; }
        public virtual DbSet<tRSPPlantillaPersonnel> tRSPPlantillaPersonnels { get; set; }
        public virtual DbSet<tRSPPosition> tRSPPositions { get; set; }
        public virtual DbSet<tRSPPositionContract> tRSPPositionContracts { get; set; }
        public virtual DbSet<tRSPPositionJobDesc> tRSPPositionJobDescs { get; set; }
        public virtual DbSet<tRSPPositionJobDescSub> tRSPPositionJobDescSubs { get; set; }
        public virtual DbSet<tRSPPositionLevel> tRSPPositionLevels { get; set; }
        public virtual DbSet<tRSPPositionQ> tRSPPositionQS { get; set; }
        public virtual DbSet<tRSPPositionSub> tRSPPositionSubs { get; set; }
        public virtual DbSet<tRSPPSBApp> tRSPPSBApps { get; set; }
        public virtual DbSet<tRSPPSBScreeningResult> tRSPPSBScreeningResults { get; set; }
        public virtual DbSet<tRSPPublicationItem> tRSPPublicationItems { get; set; }
        public virtual DbSet<tRSPRata> tRSPRatas { get; set; }
        public virtual DbSet<tRSPRefFundAppr> tRSPRefFundApprs { get; set; }
        public virtual DbSet<tRSPRefFundSource> tRSPRefFundSources { get; set; }
        public virtual DbSet<tRSPRefFundSourceDetail> tRSPRefFundSourceDetails { get; set; }
        public virtual DbSet<tRSPRefProgram> tRSPRefPrograms { get; set; }
        public virtual DbSet<tRSPSalaryTable> tRSPSalaryTables { get; set; }
        public virtual DbSet<tRSPSalaryTableDetail> tRSPSalaryTableDetails { get; set; }
        public virtual DbSet<tRSPSeparationCasual> tRSPSeparationCasuals { get; set; }
        public virtual DbSet<tRSPTransactionLog> tRSPTransactionLogs { get; set; }
        public virtual DbSet<tRSPWarmBody> tRSPWarmBodies { get; set; }
        public virtual DbSet<tRSPWorkGroup> tRSPWorkGroups { get; set; }
        public virtual DbSet<tRSPWorkGroupAdmin> tRSPWorkGroupAdmins { get; set; }
        public virtual DbSet<tRSPWorkGroupEmp> tRSPWorkGroupEmps { get; set; }
        public virtual DbSet<tRSPZPersonnelService> tRSPZPersonnelServices { get; set; }
        public virtual DbSet<tRSPZPlantillaCurrent> tRSPZPlantillaCurrents { get; set; }
        public virtual DbSet<tRSPZPlantillaUnfund> tRSPZPlantillaUnfunds { get; set; }
        public virtual DbSet<tRSPZPrintReport> tRSPZPrintReports { get; set; }
        public virtual DbSet<tRSPZServiceRecordTempRemark> tRSPZServiceRecordTempRemarks { get; set; }
        public virtual DbSet<tSPMSrefAdjectivalRating> tSPMSrefAdjectivalRatings { get; set; }
        public virtual DbSet<tSysMenu> tSysMenus { get; set; }
        public virtual DbSet<tSysMenuGroup> tSysMenuGroups { get; set; }
        public virtual DbSet<tSysMenuSub> tSysMenuSubs { get; set; }
        public virtual DbSet<tSysMenuUser> tSysMenuUsers { get; set; }
        public virtual DbSet<tSysRole> tSysRoles { get; set; }
        public virtual DbSet<tSysRoleMenu> tSysRoleMenus { get; set; }
        public virtual DbSet<tSysRoleUser> tSysRoleUsers { get; set; }
        public virtual DbSet<zHRISEmployee> zHRISEmployees { get; set; }
        public virtual DbSet<zRIMSJobDesc> zRIMSJobDescs { get; set; }
        public virtual DbSet<zTempSalaryTab> zTempSalaryTabs { get; set; }
        public virtual DbSet<zTempSSL2021> zTempSSL2021 { get; set; }
        public virtual DbSet<zRIMSPlantilla> zRIMSPlantillas { get; set; }
        public virtual DbSet<zRIMSQ> zRIMSQS { get; set; }
        public virtual DbSet<vAttEmpSchemeDaily> vAttEmpSchemeDailies { get; set; }
        public virtual DbSet<vLNDCompetencyPositionMap> vLNDCompetencyPositionMaps { get; set; }
        public virtual DbSet<vLNDCompetencyStandard> vLNDCompetencyStandards { get; set; }
        public virtual DbSet<vLNDCompetencyStandardTech> vLNDCompetencyStandardTeches { get; set; }
        public virtual DbSet<vLNDComptRespondent> vLNDComptRespondents { get; set; }
        public virtual DbSet<vLNDComptResult> vLNDComptResults { get; set; }
        public virtual DbSet<vLNDPsychoSocialTest> vLNDPsychoSocialTests { get; set; }
        public virtual DbSet<vLNDToolList> vLNDToolLists { get; set; }
        public virtual DbSet<vLNDToolListed> vLNDToolListeds { get; set; }
        public virtual DbSet<vLNDToolProgressive> vLNDToolProgressives { get; set; }
        public virtual DbSet<vNOSA> vNOSAs { get; set; }
        public virtual DbSet<vOnlineRequest> vOnlineRequests { get; set; }
        public virtual DbSet<vOnlineRequestItem> vOnlineRequestItems { get; set; }
        public virtual DbSet<vOrgStructure> vOrgStructures { get; set; }
        public virtual DbSet<vRIMSPlantilla> vRIMSPlantillas { get; set; }
        public virtual DbSet<vRSPAppointmentEligibility> vRSPAppointmentEligibilities { get; set; }
        public virtual DbSet<vRSPAppointmentNPPosted> vRSPAppointmentNPPosteds { get; set; }
        public virtual DbSet<vRSPApptNPPostedLatest> vRSPApptNPPostedLatests { get; set; }
        public virtual DbSet<vRSPEmployee> vRSPEmployees { get; set; }
        public virtual DbSet<vRSPEmployeeCurrentPosition> vRSPEmployeeCurrentPositions { get; set; }
        public virtual DbSet<vRSPEmployeeLatest> vRSPEmployeeLatests { get; set; }
        public virtual DbSet<vRSPEmployeePlantilla> vRSPEmployeePlantillas { get; set; }
        public virtual DbSet<vRSPEmployeePosition> vRSPEmployeePositions { get; set; }
        public virtual DbSet<vRSPEmployeePositionLatest> vRSPEmployeePositionLatests { get; set; }
        public virtual DbSet<vRSPNONPlantillaPersonnel> vRSPNONPlantillaPersonnels { get; set; }
        public virtual DbSet<vRSPNOSIPropBudYear> vRSPNOSIPropBudYears { get; set; }
        public virtual DbSet<vRSPPlantillaPersonnel> vRSPPlantillaPersonnels { get; set; }
        public virtual DbSet<vRSPPlantillaPrinting> vRSPPlantillaPrintings { get; set; }
        public virtual DbSet<vRSPPlantillaPublication> vRSPPlantillaPublications { get; set; }
        public virtual DbSet<vRSPPositionJobDesc> vRSPPositionJobDescs { get; set; }
        public virtual DbSet<vRSPPositionJobDescSub> vRSPPositionJobDescSubs { get; set; }
        public virtual DbSet<vRSPPositionPlantilla> vRSPPositionPlantillas { get; set; }
        public virtual DbSet<vRSPPositionPlantillaNon> vRSPPositionPlantillaNons { get; set; }
        public virtual DbSet<vRSPPSBAppCoTerm> vRSPPSBAppCoTerms { get; set; }
        public virtual DbSet<vRSPPSBApplication> vRSPPSBApplications { get; set; }
        public virtual DbSet<vRSPPublicationItem> vRSPPublicationItems { get; set; }
        public virtual DbSet<vRSPPublicationItemLast> vRSPPublicationItemLasts { get; set; }
        public virtual DbSet<vRSPRefFundSource> vRSPRefFundSources { get; set; }
        public virtual DbSet<vRSPRefProgram> vRSPRefPrograms { get; set; }
        public virtual DbSet<vRSPSalaryDetail> vRSPSalaryDetails { get; set; }
        public virtual DbSet<vRSPSalaryDetailCurrent> vRSPSalaryDetailCurrents { get; set; }
        public virtual DbSet<vRSPSalarySchedCasual> vRSPSalarySchedCasuals { get; set; }
        public virtual DbSet<vRSPSalarySchedJO> vRSPSalarySchedJOes { get; set; }
        public virtual DbSet<vRSPSeparationCasual> vRSPSeparationCasuals { get; set; }
        public virtual DbSet<vRSPZPersonnelService> vRSPZPersonnelServices { get; set; }
        public virtual DbSet<vSalaryTable> vSalaryTables { get; set; }
        public virtual DbSet<vSRecord> vSRecords { get; set; }
        public virtual DbSet<vSysMenu> vSysMenus { get; set; }
        public virtual DbSet<vSysMenuUser> vSysMenuUsers { get; set; }
        public virtual DbSet<vSysRoleMenu> vSysRoleMenus { get; set; }
        public virtual DbSet<vSysUserRole> vSysUserRoles { get; set; }
        public virtual DbSet<zTempEmployeeInfo> zTempEmployeeInfoes { get; set; }
        public virtual DbSet<vRSPAppointmentNotify> vRSPAppointmentNotifies { get; set; }
        public virtual DbSet<tRSPZPSChecker> tRSPZPSCheckers { get; set; }
        public virtual DbSet<tRSPVacantPositionData> tRSPVacantPositionDatas { get; set; }
        public virtual DbSet<tRSPVacantPositionSum> tRSPVacantPositionSums { get; set; }
        public virtual DbSet<vRSPNOSA> vRSPNOSAs { get; set; }
        public virtual DbSet<tRSPAppointmentCasualEmp> tRSPAppointmentCasualEmps { get; set; }
        public virtual DbSet<tRSPAppointmentCasual> tRSPAppointmentCasuals { get; set; }
        public virtual DbSet<vRSPAppointmentPostedNP> vRSPAppointmentPostedNPs { get; set; }
        public virtual DbSet<tRSPZPlantillaVacant> tRSPZPlantillaVacants { get; set; }
        public virtual DbSet<vRSPPSBApp> vRSPPSBApps { get; set; }
        public virtual DbSet<vRSPSeparation> vRSPSeparations { get; set; }
        public virtual DbSet<tRSPPositionJobDescStr> tRSPPositionJobDescStrs { get; set; }
        public virtual DbSet<tRSPNOSA> tRSPNOSAs { get; set; }
        public virtual DbSet<vPDSEligibility> vPDSEligibilities { get; set; }
        public virtual DbSet<tRSPApplicationProfileElig> tRSPApplicationProfileEligs { get; set; }
        public virtual DbSet<tRSPApplicationProfileExpr> tRSPApplicationProfileExprs { get; set; }
        public virtual DbSet<tRSPApplicationProfilePM> tRSPApplicationProfilePMs { get; set; }
        public virtual DbSet<tRSPApplicationProfileTraining> tRSPApplicationProfileTrainings { get; set; }
        public virtual DbSet<tLNDCompetencyPositionGroup> tLNDCompetencyPositionGroups { get; set; }
        public virtual DbSet<tRSPApplicationProfileEducation> tRSPApplicationProfileEducations { get; set; }
        public virtual DbSet<tSPMSIPRCRating> tSPMSIPRCRatings { get; set; }
        public virtual DbSet<tLNDComptAssessment> tLNDComptAssessments { get; set; }
        public virtual DbSet<vRSPApplication> vRSPApplications { get; set; }
        public virtual DbSet<tLNDComptRespondentApplicant> tLNDComptRespondentApplicants { get; set; }
        public virtual DbSet<vLNDComptRespondentApplicant> vLNDComptRespondentApplicants { get; set; }
        public virtual DbSet<tLNDComptRespondentResult> tLNDComptRespondentResults { get; set; }
        public virtual DbSet<vLNDComptRespondentResult> vLNDComptRespondentResults { get; set; }
        public virtual DbSet<vSPMSIPCRRating> vSPMSIPCRRatings { get; set; }
        public virtual DbSet<vRSPScreening> vRSPScreenings { get; set; }
        public virtual DbSet<vRSPAppointmentNPEmployee> vRSPAppointmentNPEmployees { get; set; }
        public virtual DbSet<tRSPZPSComputationMain> tRSPZPSComputationMains { get; set; }
        public virtual DbSet<vRSPZPSComputation> vRSPZPSComputations { get; set; }
        public virtual DbSet<tRSPZPSComputation> tRSPZPSComputations { get; set; }
        public virtual DbSet<tRSPPublicationVacantForecast> tRSPPublicationVacantForecasts { get; set; }
        public virtual DbSet<vRSPPublicationVacantForecast> vRSPPublicationVacantForecasts { get; set; }
        public virtual DbSet<vRSPPositionQ> vRSPPositionQS { get; set; }
        public virtual DbSet<tRSPAppointmentData> tRSPAppointmentDatas { get; set; }
        public virtual DbSet<tRSPPSBSchedule> tRSPPSBSchedules { get; set; }
        public virtual DbSet<vRSPPSBSchedule> vRSPPSBSchedules { get; set; }
        public virtual DbSet<tRSPZPSMonthlySaving> tRSPZPSMonthlySavings { get; set; }
        public virtual DbSet<tRSPPublication> tRSPPublications { get; set; }
        public virtual DbSet<tSystemEmailLog> tSystemEmailLogs { get; set; }
        public virtual DbSet<aaTable> aaTables { get; set; }
        public virtual DbSet<tRSPEmployee> tRSPEmployees { get; set; }
        public virtual DbSet<tApplicant> tApplicants { get; set; }
        public virtual DbSet<tSALNData> tSALNDatas { get; set; }
        public virtual DbSet<tRSPZServiceRecordTemp> tRSPZServiceRecordTemps { get; set; }
        public virtual DbSet<tPDSEducationLevel> tPDSEducationLevels { get; set; }
        public virtual DbSet<tPDSEligibility> tPDSEligibilities { get; set; }
        public virtual DbSet<tRSPServiceRecordRemark> tRSPServiceRecordRemarks { get; set; }
        public virtual DbSet<tRSPServiceRecordLog> tRSPServiceRecordLogs { get; set; }
        public virtual DbSet<tSystemLog> tSystemLogs { get; set; }
        public virtual DbSet<tRSPSeparation> tRSPSeparations { get; set; }
        public virtual DbSet<vRSPEmployeeList> vRSPEmployeeLists { get; set; }
        public virtual DbSet<vRSPAppointment> vRSPAppointments { get; set; }
        public virtual DbSet<tRSPRPTRAIData> tRSPRPTRAIDatas { get; set; }
        public virtual DbSet<tRSPServiceRecord> tRSPServiceRecords { get; set; }
        public virtual DbSet<tRSPRPTRAI> tRSPRPTRAIs { get; set; }
        public virtual DbSet<vRSPAppointmentNPP> vRSPAppointmentNPPS { get; set; }
        public virtual DbSet<tPDSEducation> tPDSEducations { get; set; }
        public virtual DbSet<tPDSChildren> tPDSChildrens { get; set; }
        public virtual DbSet<tRefAdrsBrgy> tRefAdrsBrgies { get; set; }
        public virtual DbSet<tRefAdrsCityMun> tRefAdrsCityMuns { get; set; }
        public virtual DbSet<tRefAdrsProvince> tRefAdrsProvinces { get; set; }
        public virtual DbSet<vRefAdrsBarangay> vRefAdrsBarangays { get; set; }
        public virtual DbSet<tPDSProfile> tPDSProfiles { get; set; }
        public virtual DbSet<tPDSWorkExperience> tPDSWorkExperiences { get; set; }
        public virtual DbSet<tPDSVoluntaryWork> tPDSVoluntaryWorks { get; set; }
        public virtual DbSet<tPDSSpecialSkill> tPDSSpecialSkills { get; set; }
        public virtual DbSet<tPDSTraining> tPDSTrainings { get; set; }
        public virtual DbSet<tPDSReference> tPDSReferences { get; set; }
        public virtual DbSet<tAttLog> tAttLogs { get; set; }
        public virtual DbSet<tRSPZPSByCharge> tRSPZPSByCharges { get; set; }
        public virtual DbSet<tPayrollRATA> tPayrollRATAs { get; set; }
        public virtual DbSet<tRSPPersonnelServData> tRSPPersonnelServDatas { get; set; }
        public virtual DbSet<tRSPPersonnelService> tRSPPersonnelServices { get; set; }
        public virtual DbSet<tRSPLoyalty> tRSPLoyalties { get; set; }
        public virtual DbSet<tPayrollHazard> tPayrollHazards { get; set; }
        public virtual DbSet<tRSPPlantilla> tRSPPlantillas { get; set; }
        public virtual DbSet<tLNDSurvey> tLNDSurveys { get; set; }
        public virtual DbSet<tLNDSurveyQuestion> tLNDSurveyQuestions { get; set; }
        public virtual DbSet<vRSPPlantilla> vRSPPlantillas { get; set; }
        public virtual DbSet<tLNDSurveyRespondent> tLNDSurveyRespondents { get; set; }
        public virtual DbSet<tRSPRefFundPersonnelService> tRSPRefFundPersonnelServices { get; set; }
        public virtual DbSet<vRSPAppointmentNonPlantilla> vRSPAppointmentNonPlantillas { get; set; }
        public virtual DbSet<tReportBudgetaryReq> tReportBudgetaryReqs { get; set; }
        public virtual DbSet<vRSPPlantillaProposed> vRSPPlantillaProposeds { get; set; }
        public virtual DbSet<vLNDSurveyRepondent> vLNDSurveyRepondents { get; set; }
        public virtual DbSet<tLNDSurveyReport> tLNDSurveyReports { get; set; }
        public virtual DbSet<tLNDSurveyResponse> tLNDSurveyResponses { get; set; }
        public virtual DbSet<tAttEmpWorkSched> tAttEmpWorkScheds { get; set; }
        public virtual DbSet<tAttWorkSched> tAttWorkScheds { get; set; }
        public virtual DbSet<tAttWorkSchedTemplate> tAttWorkSchedTemplates { get; set; }
        public virtual DbSet<tAttWorkSchedDetail> tAttWorkSchedDetails { get; set; }
        public virtual DbSet<vRSPWorkGroupEmp> vRSPWorkGroupEmps { get; set; }
        public virtual DbSet<tAttEmpDailyLog> tAttEmpDailyLogs { get; set; }
    
        [DbFunction("HRISDBEntities", "fnGetStepIncInYear")]
        public virtual IQueryable<fnGetStepIncInYear_Result> fnGetStepIncInYear(Nullable<System.DateTime> stepDate)
        {
            var stepDateParameter = stepDate.HasValue ?
                new ObjectParameter("stepDate", stepDate) :
                new ObjectParameter("stepDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetStepIncInYear_Result>("[HRISDBEntities].[fnGetStepIncInYear](@stepDate)", stepDateParameter);
        }
    
        [DbFunction("HRISDBEntities", "fnStepNextYear")]
        public virtual IQueryable<fnStepNextYear_Result> fnStepNextYear(Nullable<System.DateTime> stepDate)
        {
            var stepDateParameter = stepDate.HasValue ?
                new ObjectParameter("stepDate", stepDate) :
                new ObjectParameter("stepDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnStepNextYear_Result>("[HRISDBEntities].[fnStepNextYear](@stepDate)", stepDateParameter);
        }
    
        public virtual int sp_MigrateBPNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MigrateBPNo");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spAppointmentDeleteNP(string appointmentCode)
        {
            var appointmentCodeParameter = appointmentCode != null ?
                new ObjectParameter("appointmentCode", appointmentCode) :
                new ObjectParameter("appointmentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppointmentDeleteNP", appointmentCodeParameter);
        }
    
        public virtual int spAppointmentPosting(string transCode, string appointmentCode, Nullable<System.DateTime> effectiveDate, Nullable<int> tag, string userEIC)
        {
            var transCodeParameter = transCode != null ?
                new ObjectParameter("transCode", transCode) :
                new ObjectParameter("transCode", typeof(string));
    
            var appointmentCodeParameter = appointmentCode != null ?
                new ObjectParameter("appointmentCode", appointmentCode) :
                new ObjectParameter("appointmentCode", typeof(string));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("effectiveDate", effectiveDate) :
                new ObjectParameter("effectiveDate", typeof(System.DateTime));
    
            var tagParameter = tag.HasValue ?
                new ObjectParameter("tag", tag) :
                new ObjectParameter("tag", typeof(int));
    
            var userEICParameter = userEIC != null ?
                new ObjectParameter("userEIC", userEIC) :
                new ObjectParameter("userEIC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppointmentPosting", transCodeParameter, appointmentCodeParameter, effectiveDateParameter, tagParameter, userEICParameter);
        }
    
        public virtual int spAppointmentPostingCasual(string appointmentItemCode, Nullable<System.DateTime> assumptionDate, string userEIC, Nullable<decimal> annual, Nullable<decimal> totalPS)
        {
            var appointmentItemCodeParameter = appointmentItemCode != null ?
                new ObjectParameter("appointmentItemCode", appointmentItemCode) :
                new ObjectParameter("appointmentItemCode", typeof(string));
    
            var assumptionDateParameter = assumptionDate.HasValue ?
                new ObjectParameter("assumptionDate", assumptionDate) :
                new ObjectParameter("assumptionDate", typeof(System.DateTime));
    
            var userEICParameter = userEIC != null ?
                new ObjectParameter("userEIC", userEIC) :
                new ObjectParameter("userEIC", typeof(string));
    
            var annualParameter = annual.HasValue ?
                new ObjectParameter("annual", annual) :
                new ObjectParameter("annual", typeof(decimal));
    
            var totalPSParameter = totalPS.HasValue ?
                new ObjectParameter("totalPS", totalPS) :
                new ObjectParameter("totalPS", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppointmentPostingCasual", appointmentItemCodeParameter, assumptionDateParameter, userEICParameter, annualParameter, totalPSParameter);
        }
    
        public virtual int spAppointmentPostingNP(string appointmentItemCode, Nullable<System.DateTime> assumptionDate, string workCode, string userEIC)
        {
            var appointmentItemCodeParameter = appointmentItemCode != null ?
                new ObjectParameter("appointmentItemCode", appointmentItemCode) :
                new ObjectParameter("appointmentItemCode", typeof(string));
    
            var assumptionDateParameter = assumptionDate.HasValue ?
                new ObjectParameter("assumptionDate", assumptionDate) :
                new ObjectParameter("assumptionDate", typeof(System.DateTime));
    
            var workCodeParameter = workCode != null ?
                new ObjectParameter("workCode", workCode) :
                new ObjectParameter("workCode", typeof(string));
    
            var userEICParameter = userEIC != null ?
                new ObjectParameter("userEIC", userEIC) :
                new ObjectParameter("userEIC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppointmentPostingNP", appointmentItemCodeParameter, assumptionDateParameter, workCodeParameter, userEICParameter);
        }
    
        public virtual int spApptPostingNONPlantilla(string appointmentItemCode, Nullable<System.DateTime> assumptionDate, string userEIC)
        {
            var appointmentItemCodeParameter = appointmentItemCode != null ?
                new ObjectParameter("appointmentItemCode", appointmentItemCode) :
                new ObjectParameter("appointmentItemCode", typeof(string));
    
            var assumptionDateParameter = assumptionDate.HasValue ?
                new ObjectParameter("assumptionDate", assumptionDate) :
                new ObjectParameter("assumptionDate", typeof(System.DateTime));
    
            var userEICParameter = userEIC != null ?
                new ObjectParameter("userEIC", userEIC) :
                new ObjectParameter("userEIC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApptPostingNONPlantilla", appointmentItemCodeParameter, assumptionDateParameter, userEICParameter);
        }
    
        public virtual int spLNDRespRatingCalQ(string respondentCode)
        {
            var respondentCodeParameter = respondentCode != null ?
                new ObjectParameter("respondentCode", respondentCode) :
                new ObjectParameter("respondentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLNDRespRatingCalQ", respondentCodeParameter);
        }
    
        public virtual int spLNDRespRatingCalQRemarks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLNDRespRatingCalQRemarks");
        }
    
        public virtual int spNOSA(string nOSACode, string userEIC)
        {
            var nOSACodeParameter = nOSACode != null ?
                new ObjectParameter("NOSACode", nOSACode) :
                new ObjectParameter("NOSACode", typeof(string));
    
            var userEICParameter = userEIC != null ?
                new ObjectParameter("userEIC", userEIC) :
                new ObjectParameter("userEIC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNOSA", nOSACodeParameter, userEICParameter);
        }
    
        public virtual int spNOSAPosting(string nOSACode)
        {
            var nOSACodeParameter = nOSACode != null ?
                new ObjectParameter("NOSACode", nOSACode) :
                new ObjectParameter("NOSACode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNOSAPosting", nOSACodeParameter);
        }
    
        public virtual int spNOSI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNOSI");
        }
    
        public virtual int spNOSIPosting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNOSIPosting");
        }
    
        public virtual ObjectResult<spPSBApplicantProfile_Result> spPSBApplicantProfile(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("applicationCode", applicationCode) :
                new ObjectParameter("applicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPSBApplicantProfile_Result>("spPSBApplicantProfile", applicationCodeParameter);
        }
    
        public virtual int spReGenItemNo(string functionCode, Nullable<int> startItemNo)
        {
            var functionCodeParameter = functionCode != null ?
                new ObjectParameter("functionCode", functionCode) :
                new ObjectParameter("functionCode", typeof(string));
    
            var startItemNoParameter = startItemNo.HasValue ?
                new ObjectParameter("startItemNo", startItemNo) :
                new ObjectParameter("startItemNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReGenItemNo", functionCodeParameter, startItemNoParameter);
        }
    
        public virtual int spRePostPlantillaPosition()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRePostPlantillaPosition");
        }
    
        public virtual int spUpdateQS2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateQS2");
        }
    
        public virtual int spAppointmentPostingNonPlan(string appointmentItemCode, Nullable<System.DateTime> assumptionDate, string workCode, string userEIC)
        {
            var appointmentItemCodeParameter = appointmentItemCode != null ?
                new ObjectParameter("appointmentItemCode", appointmentItemCode) :
                new ObjectParameter("appointmentItemCode", typeof(string));
    
            var assumptionDateParameter = assumptionDate.HasValue ?
                new ObjectParameter("assumptionDate", assumptionDate) :
                new ObjectParameter("assumptionDate", typeof(System.DateTime));
    
            var workCodeParameter = workCode != null ?
                new ObjectParameter("workCode", workCode) :
                new ObjectParameter("workCode", typeof(string));
    
            var userEICParameter = userEIC != null ?
                new ObjectParameter("userEIC", userEIC) :
                new ObjectParameter("userEIC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppointmentPostingNonPlan", appointmentItemCodeParameter, assumptionDateParameter, workCodeParameter, userEICParameter);
        }
    }
}
